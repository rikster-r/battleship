(()=>{"use strict";class e{constructor(e,t,s,a=!1){this.length=e,this.hits=Array(e).fill(!1),this.vertical=a,this.x=t,this.y=s,this.endX=a?t:t+e-1,this.endY=a?s+e-1:s}hit(e){this.hits[e]=!0}isSunk(){return this.hits.every((e=>!0===e))}hasCell(e,t){return this.x-1<=e&&e<=this.endX+1&&this.y-1<=t&&t<=this.endY+1}}class t{constructor(){this.ships=new Map([[1,new e(1)],[2,new e(1)],[3,new e(2)],[4,new e(2)],[5,new e(3)],[6,new e(3)],[7,new e(4)],[8,new e(4)]]),this.missed=new Set}changeShipCoords(t,s,a,r=!1){const i=this.ships.get(t);this.#e(s,a,i.length,r,t)&&this.ships.set(t,new e(i.length,s,a,r))}#e(e,t,s,a,r){if(e+s-1>10)return!1;if(t>10)return!1;if(a&&t+s-1>10)return!1;if(e<1||t<1)return!1;if("number"!=typeof e||"number"!=typeof t)return!1;for(let[i,n]of this.ships.entries())if(i!==r&&void 0!==n.length)for(let r=0;r<=s;r++)if(a){if(n.hasCell(e,t+r))return!1}else if(n.hasCell(e+r,t))return!1;return!0}receiveAttack(e,t){if(e<1||e>10)return;if(t<1||t>10)return;let s=!0;for(const a of this.ships.values())if(a.hasCell(e,t)){const r=a.vertical?t-a.y:e-a.x;a.hit(r),s=!1,a.isSunk()&&this.#t(a);break}s&&this.missed.add([e,t])}#t(e){if(e.vertical){for(let t=-1;t<=e.length;t++)this.missed.add([e.x-1,e.y+t]),this.missed.add([e.x+1,e.y+t]);this.missed.add([e.x,e.y-1]),this.missed.add([e.x,e.endY+1])}else{for(let t=-1;t<=e.length;t++)this.missed.add([e.x+t,e.y-1]),this.missed.add([e.x+t,e.y+1]);this.missed.add([e.x-1,e.y]),this.missed.add([e.endX+1,e.y])}}areShipsSunk(){return this.ships.every((e=>{e.isSunk()}))}}class s{constructor(e){this.name=e,this.enemy=void 0,this.board=new t}makeMove(e,t){this.enemy.board.receiveAttack(e,t)}}const a=new class extends s{constructor(){super("human")}},r=new class extends s{constructor(){super("computer"),this.attacks=new Set}makeMove(){const[e,t]=this.#s();super.makeMove(e,t)}#s(){let e,t;do{e=this.#a(1,10),t=this.#a(1,10)}while(this.attacks.has([e,t]));return this.attacks.add([e,t]),[e,t]}#a(e,t){Math.floor(Math.random()*(t-e+1)+e)}};a.enemy=r,r.enemy=a;const i=new class{constructor(){this.startGameButton=document.querySelector("[data-start-game]"),this.humanField=document.querySelector("[data-human-field]"),this.computerField=document.querySelector("[data-computer-field]"),this.dragndrops=document.querySelectorAll('[draggable="true"]'),this.currentPlayer=a,this.gameGoing=!1}startGame(){}update(e){const t="human"===e.name?this.humanField:this.computerField;e.board.ships.forEach(((s,a)=>{if(s.x)for(let r=0;r<s.length;r++){let i;i=s.vertical?t.querySelector(`[data-x="${s.x}"][data-y="${s.y+r}"]`):t.querySelector(`[data-x="${s.x+r}"][data-y="${s.y}"]`),i.dataset.id=a,s.isSunk()?(i.className="sunk",document.querySelector(`[data-${e.name}-ship][data-ship-id="${a}"]`).classList.remove("active")):s.hits[r]&&(i.className="hit")}})),e.board.missed.forEach((e=>{t.querySelector(`[data-x="${e[0]}"][data-y="${e[1]}"]`).className="missed"}))}populateField(e,t){for(let s=1;s<=10;s++)for(let a=1;a<=10;a++){let r=document.createElement("button");r.dataset.y=s,r.dataset.x=a,t&&r.addEventListener("click",(e=>t(e.target))),e.append(r)}}};i.populateField(i.humanField),i.populateField(i.computerField),i.startGameButton.addEventListener("click",(function(){i.startGame()})),i.dragndrops.forEach((e=>{e.addEventListener("dragstart",(function(e){!function(e){e.dataTransfer.setData("id",e.target.dataset.id),e.dataTransfer.setData("direction",e.target.dataset.vertical)}(e)})),e.addEventListener("click",(function(e){!function(e){const t=e.target.closest(".ship-wrapper");t.dataset.vertical="true"===t.dataset.vertical?"":"true"}(e)}))})),i.humanField.addEventListener("dragover",(function(e){e.preventDefault()})),i.humanField.addEventListener("drop",(function(e){!function(e){const t=Number(e.dataTransfer.getData("id")),s=Number(e.target.dataset.x),r=Number(e.target.dataset.y),n=e.dataTransfer.getData("direction");a.board.changeShipCoords(t,s,r,n),a.board.ships.get(t).x&&document.querySelector(`[draggable="true"][data-id="${t}"`).remove(),i.update(a)}(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,